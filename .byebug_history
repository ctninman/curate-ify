c
relation.each_value{|v| puts v}
split
split = relation.split('follower_id')
relation.id
relation:id
string[:id]
string = relation.to_s
relation.to_s
relation[:id]
relation
c
relation
c
relation
c
relation
user_id
c
relation
c
relations
c
params[:id].to_i
params[:id]
params[:followee_id]
params[:followee_id
relation
c
relations
c
follower_id
relation.keys
relation["relationship_id"]
relation[:relationship_id]
relation[:follower_id][0]
relation[:follower_id]
relation[follower_id]
relation
user_id
foll = relation[follower_id]
foll = relation[:follower_id]
relation[:follower_id].to_i
relation[:follower_id].to_s
relation.follower_id
relation[:follower_id]
user_id
c
relation
c
relation
c
relation
c
session[:user_id]
params
c
session[:user_id]
session[:id]
params
c
session[:user_id]
params
c
ul.update({email: 'a@a.com'})
ul.update(email: 'a@a.com')
ul
ul=User.last
User.last
spotify_user
c
User.last
c
spotify_user['token_updated_at']
spotify_user
c
auth_params['access_token']
spotify_user
c
current_user.access_token_expired?
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
c
incoming_album.errors.full_messages
incoming_album.errors
incoming_album
c
user_spotify_url
user_spotify_username
user_spotify_profile_image
user_spotify_expires_in
user_spotify_refresh_token
user_spotify_access_token
c
user_spotify_access_token
c
user_params
c
user_spotify_access_token
c
spotify_user
c
user_params['id']
auth_params['id']
user_params
c
user_params
user_response
c
auth_params['external_urls']['spotify']
auth_params['id']
auth_params['images'][0]['url']
auth_params['expires_in']
auth_params['refresh_token']
auth_params['access_token']
spotify_user
c
user_params
c
user_response
c
header
c
auth_params
c
auth_response
c
auth_response
body
c
header
c
auth_params
c
auth_response
c
auth_response
body
c
spotify_uri
c
new_user
c
new_user
c
header
c
auth_params
user_params
c
body
c
new_relationship
c
new_relationship
c
params
continue
exit
c
updated_queue
c
updated_queue
c
user_id
c
queue_album
c
matching_users
c
match_array
matching_users
c
match_array
c
match_array
User.matched_all(match_array)
c
match_array
c
match_array
matching_albums_array
c
params[:matching_albums_array]
c
exit
is_true
exit
is_true[0]
is_true.first
is_true
is_true.length
is_true
c
found_lists
c
found_lists
c
found_lists
c
found_lists
c
found_lists
c
found_lists
c
params
found_lists
c
params
c
params
c
user_artists
c
incoming_album
c
incoming_album
c
exit
incoming_artist
artist_id
exit
user_artist
incoming_artist
artist_id
c
artist_id
exit
chosen_album
exit
list_id_for_update
exit
list_album
c
select_list
current_list_albums
c
current_list_albums
c
current_list_albums
c
current_list_albums
c
select_list
c
list_addition
